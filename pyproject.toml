[project]
name = "iris-ml-classification"
version = "0.1.0"
description = "Iris ML classification"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "mlflow==2.17.0",
    "virtualenv>=20.30.0",
    "pandas==2.2.3",
    "scikit-learn==1.5.2",
    "pre-commit>=4.2.0",
    "loguru>=0.7.3",
]

[project.optional-dependencies]
dev = [
    "databricks-connect==15.4.5",
    "pandas>=2.2.3",
    "pytest>=8.3.5",
    "pytest-cov >=6.1.0",
    "pytest-mock >=3.14.1",
    "requests>=2.32.3",
    "pip>=25.0.1",
    "ipykernel>=6.29.5, <7",
    "pre-commit==4.2.0",
    "streamlit==1.45.1"
]

[build-system]
requires = ["setuptools>=72.0"]
build-backend = "setuptools.build_meta"


[tool.setuptools.packages.find]
where =["src"]
include = ["iris_ml_classification"]

[tool.pytest.ini_options]
# addopts = "-s --no-header --no-summary"
testpaths = [ "tests" ]
pythonpath = [ "." ]

[tool.ruff]
line-length = 120

lint.select = [
    "F",    # pyflakes rules
    "E",    # pycodestyle error rules
    "W",    # pycodestyle warning rules
    "B",    # flake8-bugbear rules
    "I",    # isort rules
    "UP",   # pyupgrade rules
    "SIM",  # flake8-simplify rules
    "ERA",  # eradicate rules
    "C",    # pylint convention rules
    "D",    # pydocstyle rules
    "ANN"   # flake8-annotations rules
]
lint.ignore = [
    "D107", # Missing docstring in `__init__`
    "D203", # incorrect-blank-line-before-class
    "D213", # multi-line-summary-second-line
    "E501", # line-too-long
    "C901", # too complex
    "ERA001", # commented out code
]

[tool.ruff.format]
indent-style = "space"
