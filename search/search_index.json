{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-creating-and-deploying-a-databricks-app-with-asset-bundles-series","title":"Welcome to Creating and Deploying a Databricks app  with Asset Bundles Series!","text":"<p>by Mehmet Acikgoz</p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"how-to/part-1/","title":"Creating the Development Environment","text":""},{"location":"how-to/part-1/#how-to-install-git","title":"How to install Git","text":"Windows <pre><code>winget install --id Git.Git -e --source winget\n</code></pre> macOS <pre><code>brew install git\n</code></pre> Linux (Debian/Ubuntu) <pre><code>sudo apt update\nsudo apt install git\n</code></pre>"},{"location":"how-to/part-1/#how-to-install-vscode","title":"How to install VsCode","text":"Windows <pre><code># Download and install VS Code for Windows\nwinget install --id Microsoft.VisualStudioCode\n</code></pre> macOS <pre><code># Download and install VS Code for macOS using Homebrew\nbrew install --cask visual-studio-code\n</code></pre> Linux <pre><code># Download and install VS Code for Linux (Debian/Ubuntu example)\nsudo apt update\nsudo apt install wget gpg\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg\nsudo install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/\nsudo sh -c 'echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main\" &gt; /etc/apt/sources.list.d/vscode.list'\nsudo apt update\nsudo apt install code\n</code></pre>"},{"location":"how-to/part-1/#how-to-install-the-uv-python-package-manager","title":"How to Install the uv Python Package Manager","text":"<p>The <code>uv</code> package manager is a modern, ultra-fast tool for managing Python environments and dependencies. It\u2019s written in Rust and can be installed on Windows, macOS, or Linux.</p> Windows <pre><code># Install uv using PowerShell (recommended)\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> macOS <pre><code># Install uv using the official install script\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Or with Homebrew\nbrew install uv\n</code></pre> Linux <pre><code># Install uv using the official install script\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Or with wget if curl is not available\nwget -qO- https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Security Tip</p> <p>Before running any installation script from the internet, you can always inspect it first: - For bash: <code>curl https://astral.sh/uv/install.sh</code> - For PowerShell: <code>irm https://astral.sh/uv/install.ps1</code></p>"},{"location":"how-to/part-1/#verifying-your-installation","title":"Verifying Your Installation","text":"<p>After installing, check your <code>uv</code> version:</p> <pre><code>uv --version\n</code></pre> <p>You should see output like: <code>uv 0.7.18 (abcdef12 2025-06-30)</code></p>"},{"location":"how-to/part-1/#whats-next","title":"What\u2019s Next?","text":"<ul> <li>Official uv documentation</li> <li>Getting started video tutorial</li> </ul> <p>Tip: uv is not only a package manager\u2014it can also create and manage virtual environments, install Python itself, and much more. Try <code>uv --help</code> for an overview of its features.</p>"},{"location":"how-to/part-1/#how-to-signup-databricks-free-edition","title":"How to SignUp Databricks Free Edition","text":"<p>Getting started is refreshingly simple:</p> <ol> <li> <p>Visit the Databricks Free Edition signup page    This is where you\u2019ll begin your registration process.</p> </li> <li> <p>Choose your preferred signup method    You can sign up using Google, Microsoft, or your email address for maximum flexibility.</p> </li> <li> <p>Complete the registration    Fill in the required details. Databricks will provision your personal workspace immediately after you finish.</p> </li> <li> <p>Start exploring your workspace    Once inside, you\u2019ll have access to a personal workspace with serverless compute and default storage, so you can begin experimenting and building right away.</p> </li> </ol> <p>What is Databricks Free Edition?</p> <p>Databricks Free Edition is a no-cost version of Databricks designed for students, educators, hobbyists, and anyone interested in learning or experimenting with data and AI. It\u2019s ideal for learning, prototyping, and collaborative exploration, and includes many of the same features as the full Databricks platform in a serverless, quota-limited environment.</p> <p>Want a visual walkthrough? Watch this step-by-step video guide on YouTube.</p>"},{"location":"how-to/part-1/#how-to-create-a-personal-access-token-pat-in-databricks-free-edition","title":"How to create a Personal Access Token - PAT in Databricks Free Edition","text":"<p>For Step-by-Step Instructions (Standard Workflow), follow these steps:</p> <ol> <li> <p>Click your username in the top bar    This opens your user menu.</p> </li> <li> <p>Select User Settings    This brings you to your account and workspace configuration options.</p> </li> <li> <p>Navigate to Developer and the Access tokens, then click Manage    Here, you can view and manage your existing tokens.</p> </li> <li> <p>Click Generate new token and follow the prompts    You\u2019ll be asked to name your token and set an optional expiration.</p> </li> <li> <p>Copy and save your new token    You will only see the token once. Store it securely!</p> </li> </ol> <p>Security Reminder</p> <ul> <li>Do not share your personal access token with anyone.</li> <li>If you lose your token, you cannot retrieve it again\u2014you must generate a new one.</li> <li>Store your token in a secure location, such as a password manager.</li> <li>If you believe your token has been compromised, revoke it immediately in the Access Tokens tab.</li> </ul> <p>Tip: You can also watch this short video walkthrough for a visual guide.</p>"},{"location":"how-to/part-1/#how-to-install-databricks-cli","title":"How to install Databricks CLI","text":"Windows <pre><code># Using winget (recommended)\nwinget search databricks\nwinget install Databricks.DatabricksCLI\n\n# Or using Chocolatey (experimental)\nchoco install databricks-cli\n\n# Alternatively, install via Windows Subsystem for Linux (WSL)\n# Then follow Linux instructions below inside WSL\n</code></pre> macOS <pre><code># Using Homebrew tap and install\nbrew tap databricks/tap\nbrew install databricks\n\n# Or using curl to download and install\ncurl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sudo sh\n</code></pre> Linux <pre><code># Using Homebrew (Linuxbrew)\nbrew tap databricks/tap\nbrew install databricks\n\n# Or using curl to download and install\ncurl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sudo sh\n</code></pre>"},{"location":"how-to/part-1/#how-to-authenticate-the-cli-with-a-personal-access-token","title":"How to Authenticate the CLI with a Personal Access Token","text":"<p>To use the CLI, you need to authenticate it with your Databricks workspace. The most common method is with a Personal Access Token.</p> <p>How to Authenticate Generate a Personal Access Token in your Databricks workspace (navigate to User Settings &gt; Access Tokens).</p> <p>Configure the CLI by running:</p> <p><pre><code>databricks configure\n</code></pre> You\u2019ll be prompted for:</p> <p>Databricks Host: Enter your workspace URL (e.g., https://dbc-xxxx.cloud.databricks.com).</p> <p>Personal Access Token: Paste the token you generated.</p> <p>This creates a .databrickscfg configuration file in your home directory (%USERPROFILE% on Windows, ~ on macOS/Linux).</p> <p>\u201cAfter you enter your Databricks personal access token, a corresponding configuration profile is added to your .databrickscfg file. You can now use the Databricks CLI\u2019s --profile option to specify different configurations.\u201d</p> <p>Common Pitfalls and How to Avoid Them</p> <ul> <li>Forgetting to set permissions: Always manage access at the catalog and schema levels to prevent unauthorized data access.</li> <li>Losing your access token: Store it securely. If lost, revoke and regenerate it.</li> <li>CLI installation issues: Ensure your package manager is up-to-date and that your PATH includes the CLI binary.</li> </ul>"},{"location":"reference/api/","title":"api.py","text":""},{"location":"reference/api/#api-module","title":"api module","text":""},{"location":"reference/api/#iris_ml_classification.api","title":"iris_ml_classification.api","text":"<p>api module.</p>"},{"location":"reference/api/#iris_ml_classification.api-functions","title":"Functions","text":""},{"location":"reference/api/#iris_ml_classification.api.get_databricks_token","title":"get_databricks_token","text":"<pre><code>get_databricks_token(host: str, client_id: str = None, client_secret: str = None, grant_type: str = 'client_credentials', scope: str = 'all-apis') -&gt; str\n</code></pre> <p>Retrieve an OAuth access token from a Databricks host using client credentials.</p> <p>If client_id or client_secret are not provided, the function will attempt to read them from environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The Databricks workspace host URL.</p> required <code>client_id</code> <code>str</code> <p>The OAuth client ID. If not provided, uses the DATABRICKS_CLIENT_ID environment variable.</p> <code>None</code> <code>client_secret</code> <code>str</code> <p>The OAuth client secret. If not provided, uses the DATABRICKS_CLIENT_SECRET environment variable.</p> <code>None</code> <code>grant_type</code> <code>str</code> <p>The OAuth grant type, defaulting to \"client_credentials\".</p> <code>'client_credentials'</code> <code>scope</code> <code>str</code> <p>The OAuth scope, defaulting to \"all-apis\".</p> <code>'all-apis'</code> <p>Returns:</p> Type Description <code>str</code> <p>The OAuth access token as a string.</p> Source code in <code>src/iris_ml_classification/api.py</code> <pre><code>def get_databricks_token(\n    host: str,\n    client_id: str = None,\n    client_secret: str = None,\n    grant_type: str = \"client_credentials\",\n    scope: str = \"all-apis\",\n) -&gt; str:\n    \"\"\"Retrieve an OAuth access token from a Databricks host using client credentials.\n\n    If client_id or client_secret are not provided, the function will attempt to read them from environment variables.\n\n    :param host: The Databricks workspace host URL.\n    :param client_id: The OAuth client ID. If not provided, uses the DATABRICKS_CLIENT_ID environment variable.\n    :param client_secret: The OAuth client secret. If not provided, uses the DATABRICKS_CLIENT_SECRET environment variable.\n    :param grant_type: The OAuth grant type, defaulting to \"client_credentials\".\n    :param scope: The OAuth scope, defaulting to \"all-apis\".\n    :return: The OAuth access token as a string.\n    \"\"\"\n    if client_id is None:\n        client_id = os.environ[\"DATABRICKS_CLIENT_ID\"]\n    if client_secret is None:\n        client_secret = os.environ[\"DATABRICKS_CLIENT_SECRET\"]\n\n    response = requests.post(\n        f\"{host}/oidc/v1/token\",\n        auth=HTTPBasicAuth(client_id, client_secret),\n        data={\"grant_type\": grant_type, \"scope\": scope},\n    )\n    response.raise_for_status()  # Raises an error for bad responses\n    return response.json()[\"access_token\"]\n</code></pre>"},{"location":"reference/api/#iris_ml_classification.api.call_serving_endpoint","title":"call_serving_endpoint","text":"<pre><code>call_serving_endpoint(serving_endpoint: str, token: str, input_df: DataFrame, data_key: str = 'dataframe_split') -&gt; dict[str, Any]\n</code></pre> <p>Call a model serving endpoint with a DataFrame payload and returns the JSON response.</p> <p>Sends the input DataFrame as a JSON payload using the specified key and authenticates using a bearer token.</p> <p>Parameters:</p> Name Type Description Default <code>serving_endpoint</code> <code>str</code> <p>The URL of the serving endpoint.</p> required <code>token</code> <code>str</code> <p>Bearer token for authentication.</p> required <code>input_df</code> <code>DataFrame</code> <p>Input DataFrame to send as JSON.</p> required <code>data_key</code> <code>str</code> <p>Key for the JSON payload (default: 'dataframe_split').</p> <code>'dataframe_split'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The JSON response from the endpoint.</p> Source code in <code>src/iris_ml_classification/api.py</code> <pre><code>def call_serving_endpoint(\n    serving_endpoint: str, token: str, input_df: pd.DataFrame, data_key: str = \"dataframe_split\"\n) -&gt; dict[str, Any]:\n    \"\"\"Call a model serving endpoint with a DataFrame payload and returns the JSON response.\n\n    Sends the input DataFrame as a JSON payload using the specified key and authenticates using a bearer token.\n\n    :param serving_endpoint: The URL of the serving endpoint.\n    :param token: Bearer token for authentication.\n    :param input_df: Input DataFrame to send as JSON.\n    :param data_key: Key for the JSON payload (default: 'dataframe_split').\n    :return: The JSON response from the endpoint.\n    \"\"\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    payload = {data_key: input_df.to_dict(orient=\"split\")}\n    response = requests.post(serving_endpoint, headers=headers, json=payload)\n    response.raise_for_status()  # Raises an HTTPError for bad responses\n    return response.json()\n</code></pre>"},{"location":"reference/app/","title":"app.py","text":""},{"location":"reference/app/#api-reference","title":"API Reference","text":""},{"location":"reference/app/#app-module","title":"app module","text":""},{"location":"reference/app/#iris_ml_classification.app","title":"iris_ml_classification.app","text":"<p>main app module.</p>"},{"location":"reference/app/#iris_ml_classification.app-functions","title":"Functions","text":""},{"location":"reference/app/#iris_ml_classification.app.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> <p>Run the Iris Species Predictor Streamlit app.</p> <p>This function handles CSS injection, user input, prediction requests, and result display.</p> Source code in <code>src/iris_ml_classification/app.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Run the Iris Species Predictor Streamlit app.\n\n    This function handles CSS injection, user input, prediction requests, and result display.\n    \"\"\"\n    inject_css()\n    input_df = input_form()\n    if st.button(\"\ud83d\udd2e Predict Species\"):\n        try:\n            token = get_databricks_token(host=config.HOST)\n            response = call_serving_endpoint(serving_endpoint=config.SERVING_ENDPOINT, token=token, input_df=input_df)\n            predicted_species = response[\"predictions\"][0]\n            display_result(predicted_species)\n        except requests.exceptions.HTTPError as e:\n            st.error(f\"API Error: {e.response.status_code} - {e.response.text}\")\n        except Exception as e:\n            st.error(f\"Unexpected error: {str(e)}\")\n    show_footer()\n</code></pre>"},{"location":"reference/app/#api-module","title":"api module","text":""},{"location":"reference/app/#iris_ml_classification.api","title":"iris_ml_classification.api","text":"<p>api module.</p>"},{"location":"reference/app/#iris_ml_classification.api-functions","title":"Functions","text":""},{"location":"reference/app/#iris_ml_classification.api.get_databricks_token","title":"get_databricks_token","text":"<pre><code>get_databricks_token(host: str, client_id: str = None, client_secret: str = None, grant_type: str = 'client_credentials', scope: str = 'all-apis') -&gt; str\n</code></pre> <p>Retrieve an OAuth access token from a Databricks host using client credentials.</p> <p>If client_id or client_secret are not provided, the function will attempt to read them from environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The Databricks workspace host URL.</p> required <code>client_id</code> <code>str</code> <p>The OAuth client ID. If not provided, uses the DATABRICKS_CLIENT_ID environment variable.</p> <code>None</code> <code>client_secret</code> <code>str</code> <p>The OAuth client secret. If not provided, uses the DATABRICKS_CLIENT_SECRET environment variable.</p> <code>None</code> <code>grant_type</code> <code>str</code> <p>The OAuth grant type, defaulting to \"client_credentials\".</p> <code>'client_credentials'</code> <code>scope</code> <code>str</code> <p>The OAuth scope, defaulting to \"all-apis\".</p> <code>'all-apis'</code> <p>Returns:</p> Type Description <code>str</code> <p>The OAuth access token as a string.</p> Source code in <code>src/iris_ml_classification/api.py</code> <pre><code>def get_databricks_token(\n    host: str,\n    client_id: str = None,\n    client_secret: str = None,\n    grant_type: str = \"client_credentials\",\n    scope: str = \"all-apis\",\n) -&gt; str:\n    \"\"\"Retrieve an OAuth access token from a Databricks host using client credentials.\n\n    If client_id or client_secret are not provided, the function will attempt to read them from environment variables.\n\n    :param host: The Databricks workspace host URL.\n    :param client_id: The OAuth client ID. If not provided, uses the DATABRICKS_CLIENT_ID environment variable.\n    :param client_secret: The OAuth client secret. If not provided, uses the DATABRICKS_CLIENT_SECRET environment variable.\n    :param grant_type: The OAuth grant type, defaulting to \"client_credentials\".\n    :param scope: The OAuth scope, defaulting to \"all-apis\".\n    :return: The OAuth access token as a string.\n    \"\"\"\n    if client_id is None:\n        client_id = os.environ[\"DATABRICKS_CLIENT_ID\"]\n    if client_secret is None:\n        client_secret = os.environ[\"DATABRICKS_CLIENT_SECRET\"]\n\n    response = requests.post(\n        f\"{host}/oidc/v1/token\",\n        auth=HTTPBasicAuth(client_id, client_secret),\n        data={\"grant_type\": grant_type, \"scope\": scope},\n    )\n    response.raise_for_status()  # Raises an error for bad responses\n    return response.json()[\"access_token\"]\n</code></pre>"},{"location":"reference/app/#iris_ml_classification.api.call_serving_endpoint","title":"call_serving_endpoint","text":"<pre><code>call_serving_endpoint(serving_endpoint: str, token: str, input_df: DataFrame, data_key: str = 'dataframe_split') -&gt; dict[str, Any]\n</code></pre> <p>Call a model serving endpoint with a DataFrame payload and returns the JSON response.</p> <p>Sends the input DataFrame as a JSON payload using the specified key and authenticates using a bearer token.</p> <p>Parameters:</p> Name Type Description Default <code>serving_endpoint</code> <code>str</code> <p>The URL of the serving endpoint.</p> required <code>token</code> <code>str</code> <p>Bearer token for authentication.</p> required <code>input_df</code> <code>DataFrame</code> <p>Input DataFrame to send as JSON.</p> required <code>data_key</code> <code>str</code> <p>Key for the JSON payload (default: 'dataframe_split').</p> <code>'dataframe_split'</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The JSON response from the endpoint.</p> Source code in <code>src/iris_ml_classification/api.py</code> <pre><code>def call_serving_endpoint(\n    serving_endpoint: str, token: str, input_df: pd.DataFrame, data_key: str = \"dataframe_split\"\n) -&gt; dict[str, Any]:\n    \"\"\"Call a model serving endpoint with a DataFrame payload and returns the JSON response.\n\n    Sends the input DataFrame as a JSON payload using the specified key and authenticates using a bearer token.\n\n    :param serving_endpoint: The URL of the serving endpoint.\n    :param token: Bearer token for authentication.\n    :param input_df: Input DataFrame to send as JSON.\n    :param data_key: Key for the JSON payload (default: 'dataframe_split').\n    :return: The JSON response from the endpoint.\n    \"\"\"\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    payload = {data_key: input_df.to_dict(orient=\"split\")}\n    response = requests.post(serving_endpoint, headers=headers, json=payload)\n    response.raise_for_status()  # Raises an HTTPError for bad responses\n    return response.json()\n</code></pre>"},{"location":"reference/app/#ui-module","title":"ui module","text":""},{"location":"reference/app/#iris_ml_classification.ui","title":"iris_ml_classification.ui","text":"<p>ui module.</p>"},{"location":"reference/app/#iris_ml_classification.ui-functions","title":"Functions","text":""},{"location":"reference/app/#iris_ml_classification.ui.set_page","title":"set_page","text":"<pre><code>set_page() -&gt; None\n</code></pre> <p>Set the Streamlit page configuration for the Iris Flower Species Inference app.</p> <p>This function configures the page title, icon, layout, sidebar state, and menu items.</p> Source code in <code>src/iris_ml_classification/ui.py</code> <pre><code>def set_page() -&gt; None:\n    \"\"\"Set the Streamlit page configuration for the Iris Flower Species Inference app.\n\n    This function configures the page title, icon, layout, sidebar state, and menu items.\n    \"\"\"\n    st.set_page_config(\n        page_title=\"Iris Flower Species Inference\",\n        page_icon=\"\ud83c\udf38\",\n        layout=\"centered\",\n        initial_sidebar_state=\"expanded\",\n        menu_items={\n            \"Get Help\": \"https://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html\",\n            \"About\": \"#### Iris Species Prediction App\\nThis app predicts iris species from flower measurements.\\n\\nCreated by: Mehmet Acikgoz\",\n        },\n    )\n</code></pre>"},{"location":"reference/app/#iris_ml_classification.ui.inject_css","title":"inject_css","text":"<pre><code>inject_css() -&gt; None\n</code></pre> <p>Inject custom CSS styles into the Streamlit app.</p> <p>This function reads the 'styles.css' file and applies its styles to the app using markdown.</p> Source code in <code>src/iris_ml_classification/ui.py</code> <pre><code>def inject_css() -&gt; None:\n    \"\"\"Inject custom CSS styles into the Streamlit app.\n\n    This function reads the 'styles.css' file and applies its styles to the app using markdown.\n    \"\"\"\n    with open(\"styles.css\") as f:\n        # css_path = os.path.join(os.path.dirname(__file__), 'styles.css')\n        # with open(css_path) as f:\n        st.markdown(f\"&lt;style&gt;{f.read()}&lt;/style&gt;\", unsafe_allow_html=True)\n</code></pre>"},{"location":"reference/app/#iris_ml_classification.ui.input_form","title":"input_form","text":"<pre><code>input_form() -&gt; pd.DataFrame\n</code></pre> <p>Render an input form for iris flower measurements and return the input as a DataFrame.</p> <p>This function displays sliders for sepal and petal dimensions and compiles the results into a pandas DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame containing the user's input measurements for the iris flower.</p> Source code in <code>src/iris_ml_classification/ui.py</code> <pre><code>def input_form() -&gt; pd.DataFrame:\n    \"\"\"Render an input form for iris flower measurements and return the input as a DataFrame.\n\n    This function displays sliders for sepal and petal dimensions and compiles the results into a pandas DataFrame.\n\n    :return: DataFrame containing the user's input measurements for the iris flower.\n    \"\"\"\n    with st.container():\n        st.markdown(\"&lt;h1 class='iris-header'&gt;\ud83c\udf38 Iris Species Predictor \ud83c\udf38&lt;/h1&gt;\", unsafe_allow_html=True)\n        st.markdown(\n            \"&lt;p style='text-align: center; color: #555; font-size: 1.3em; margin-top:0.6em;'&gt;Enter the flower's measurements below and get its species!&lt;/p&gt;\",\n            unsafe_allow_html=True,\n        )\n\n        col1, col2 = st.columns(2)\n        with col1:\n            sepal_length = st.slider(\"\ud83c\udf31 Sepal length (cm)\", 4.30, 7.90)\n            petal_length = st.slider(\"\ud83c\udf38 Petal length (cm)\", 1.00, 6.90)\n        with col2:\n            sepal_width = st.slider(\"\ud83c\udf3f Sepal width (cm)\", 2.0, 4.40)\n            petal_width = st.slider(\"\ud83d\udcae Petal width (cm)\", 0.10, 2.50)\n\n        input_df = pd.DataFrame(\n            [[sepal_length, sepal_width, petal_length, petal_width]],\n            columns=[\"sepal length (cm)\", \"sepal width (cm)\", \"petal length (cm)\", \"petal width (cm)\"],\n        )\n\n        return input_df\n</code></pre>"},{"location":"reference/app/#iris_ml_classification.ui.display_result","title":"display_result","text":"<pre><code>display_result(predicted_species: str) -&gt; None\n</code></pre> <p>Display the predicted iris species with a corresponding emoji and style.</p> <p>This function shows the prediction result in a styled card using markdown and HTML.</p> <p>Parameters:</p> Name Type Description Default <code>predicted_species</code> <code>str</code> <p>The predicted iris species as a string.</p> required Source code in <code>src/iris_ml_classification/ui.py</code> <pre><code>def display_result(predicted_species: str) -&gt; None:\n    \"\"\"Display the predicted iris species with a corresponding emoji and style.\n\n    This function shows the prediction result in a styled card using markdown and HTML.\n\n    :param predicted_species: The predicted iris species as a string.\n    \"\"\"\n    species_emoji = {\"setosa\": \"\ud83c\udf31\", \"versicolor\": \"\ud83c\udf3f\", \"virginica\": \"\ud83d\udc90\"}\n    species_class = {\"setosa\": \"species-setosa\", \"versicolor\": \"species-versicolor\", \"virginica\": \"species-virginica\"}\n    st.markdown(\n        f\"&lt;div class='result-card'&gt;\"\n        f\"&lt;span class='{species_class[predicted_species]}' style='font-size: 1.5em;'&gt;\"\n        f\"{species_emoji[predicted_species]} Predicted species: &lt;b&gt;{predicted_species.capitalize()}&lt;/b&gt;\"\n        f\"&lt;/span&gt;&lt;/div&gt;\",\n        unsafe_allow_html=True,\n    )\n</code></pre>"},{"location":"reference/app/#iris_ml_classification.ui.show_footer","title":"show_footer","text":"<pre><code>show_footer() -&gt; None\n</code></pre> <p>Display a footer message crediting the app creator and technologies used.</p> <p>This function renders a styled footer using markdown and HTML.</p> Source code in <code>src/iris_ml_classification/ui.py</code> <pre><code>def show_footer() -&gt; None:\n    \"\"\"Display a footer message crediting the app creator and technologies used.\n\n    This function renders a styled footer using markdown and HTML.\n    \"\"\"\n    st.markdown(\n        \"&lt;div class='footer'&gt;Made with \u2764\ufe0f using Streamlit &amp; Databricks Free Edition by Mehmet Acikgoz&lt;/div&gt;\",\n        unsafe_allow_html=True,\n    )\n</code></pre>"},{"location":"reference/config/","title":"config.py","text":""},{"location":"reference/config/#iris_ml_classification.config","title":"iris_ml_classification.config","text":"<p>Configuration utilities for serving endpoint settings.</p> <p>This module defines the <code>Config</code> class, which loads environment variables and constructs the serving endpoint URL for the Iris ML Classification service.</p> <p>Classes:     Config: Loads environment variables and constructs endpoint URLs.</p> <p>Attributes:     config (Config): An instance of the Config class for convenience.</p>"},{"location":"reference/config/#iris_ml_classification.config-classes","title":"Classes","text":""},{"location":"reference/config/#iris_ml_classification.config.Config","title":"Config","text":"<p>Configuration class for serving endpoint settings.</p> <p>This class loads environment variables and constructs the serving endpoint URL.</p>"},{"location":"reference/config/#iris_ml_classification.config.Config","title":"iris_ml_classification.config.Config","text":"<p>Configuration class for serving endpoint settings.</p> <p>This class loads environment variables and constructs the serving endpoint URL.</p>"},{"location":"reference/config/#iris_ml_classification.config.Config-attributes","title":"Attributes","text":""},{"location":"reference/config/#iris_ml_classification.config.Config.ENDPOINT_NAME","title":"ENDPOINT_NAME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ENDPOINT_NAME = getenv('ENDPOINT_NAME', 'iris-classification-basic-model-serving')\n</code></pre>"},{"location":"reference/config/#iris_ml_classification.config.Config.HOST","title":"HOST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>HOST = HOST if startswith('https://') else f'https://{HOST}'\n</code></pre>"},{"location":"reference/config/#iris_ml_classification.config.Config.SERVING_ENDPOINT","title":"SERVING_ENDPOINT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SERVING_ENDPOINT = f'{HOST}/serving-endpoints/{ENDPOINT_NAME}/invocations'\n</code></pre>"},{"location":"reference/ui/","title":"ui.py","text":""},{"location":"reference/ui/#ui-module","title":"ui module","text":""},{"location":"reference/ui/#iris_ml_classification.ui","title":"iris_ml_classification.ui","text":"<p>ui module.</p>"},{"location":"reference/ui/#iris_ml_classification.ui-functions","title":"Functions","text":""},{"location":"reference/ui/#iris_ml_classification.ui.set_page","title":"set_page","text":"<pre><code>set_page() -&gt; None\n</code></pre> <p>Set the Streamlit page configuration for the Iris Flower Species Inference app.</p> <p>This function configures the page title, icon, layout, sidebar state, and menu items.</p> Source code in <code>src/iris_ml_classification/ui.py</code> <pre><code>def set_page() -&gt; None:\n    \"\"\"Set the Streamlit page configuration for the Iris Flower Species Inference app.\n\n    This function configures the page title, icon, layout, sidebar state, and menu items.\n    \"\"\"\n    st.set_page_config(\n        page_title=\"Iris Flower Species Inference\",\n        page_icon=\"\ud83c\udf38\",\n        layout=\"centered\",\n        initial_sidebar_state=\"expanded\",\n        menu_items={\n            \"Get Help\": \"https://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html\",\n            \"About\": \"#### Iris Species Prediction App\\nThis app predicts iris species from flower measurements.\\n\\nCreated by: Mehmet Acikgoz\",\n        },\n    )\n</code></pre>"},{"location":"reference/ui/#iris_ml_classification.ui.inject_css","title":"inject_css","text":"<pre><code>inject_css() -&gt; None\n</code></pre> <p>Inject custom CSS styles into the Streamlit app.</p> <p>This function reads the 'styles.css' file and applies its styles to the app using markdown.</p> Source code in <code>src/iris_ml_classification/ui.py</code> <pre><code>def inject_css() -&gt; None:\n    \"\"\"Inject custom CSS styles into the Streamlit app.\n\n    This function reads the 'styles.css' file and applies its styles to the app using markdown.\n    \"\"\"\n    with open(\"styles.css\") as f:\n        # css_path = os.path.join(os.path.dirname(__file__), 'styles.css')\n        # with open(css_path) as f:\n        st.markdown(f\"&lt;style&gt;{f.read()}&lt;/style&gt;\", unsafe_allow_html=True)\n</code></pre>"},{"location":"reference/ui/#iris_ml_classification.ui.input_form","title":"input_form","text":"<pre><code>input_form() -&gt; pd.DataFrame\n</code></pre> <p>Render an input form for iris flower measurements and return the input as a DataFrame.</p> <p>This function displays sliders for sepal and petal dimensions and compiles the results into a pandas DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame containing the user's input measurements for the iris flower.</p> Source code in <code>src/iris_ml_classification/ui.py</code> <pre><code>def input_form() -&gt; pd.DataFrame:\n    \"\"\"Render an input form for iris flower measurements and return the input as a DataFrame.\n\n    This function displays sliders for sepal and petal dimensions and compiles the results into a pandas DataFrame.\n\n    :return: DataFrame containing the user's input measurements for the iris flower.\n    \"\"\"\n    with st.container():\n        st.markdown(\"&lt;h1 class='iris-header'&gt;\ud83c\udf38 Iris Species Predictor \ud83c\udf38&lt;/h1&gt;\", unsafe_allow_html=True)\n        st.markdown(\n            \"&lt;p style='text-align: center; color: #555; font-size: 1.3em; margin-top:0.6em;'&gt;Enter the flower's measurements below and get its species!&lt;/p&gt;\",\n            unsafe_allow_html=True,\n        )\n\n        col1, col2 = st.columns(2)\n        with col1:\n            sepal_length = st.slider(\"\ud83c\udf31 Sepal length (cm)\", 4.30, 7.90)\n            petal_length = st.slider(\"\ud83c\udf38 Petal length (cm)\", 1.00, 6.90)\n        with col2:\n            sepal_width = st.slider(\"\ud83c\udf3f Sepal width (cm)\", 2.0, 4.40)\n            petal_width = st.slider(\"\ud83d\udcae Petal width (cm)\", 0.10, 2.50)\n\n        input_df = pd.DataFrame(\n            [[sepal_length, sepal_width, petal_length, petal_width]],\n            columns=[\"sepal length (cm)\", \"sepal width (cm)\", \"petal length (cm)\", \"petal width (cm)\"],\n        )\n\n        return input_df\n</code></pre>"},{"location":"reference/ui/#iris_ml_classification.ui.display_result","title":"display_result","text":"<pre><code>display_result(predicted_species: str) -&gt; None\n</code></pre> <p>Display the predicted iris species with a corresponding emoji and style.</p> <p>This function shows the prediction result in a styled card using markdown and HTML.</p> <p>Parameters:</p> Name Type Description Default <code>predicted_species</code> <code>str</code> <p>The predicted iris species as a string.</p> required Source code in <code>src/iris_ml_classification/ui.py</code> <pre><code>def display_result(predicted_species: str) -&gt; None:\n    \"\"\"Display the predicted iris species with a corresponding emoji and style.\n\n    This function shows the prediction result in a styled card using markdown and HTML.\n\n    :param predicted_species: The predicted iris species as a string.\n    \"\"\"\n    species_emoji = {\"setosa\": \"\ud83c\udf31\", \"versicolor\": \"\ud83c\udf3f\", \"virginica\": \"\ud83d\udc90\"}\n    species_class = {\"setosa\": \"species-setosa\", \"versicolor\": \"species-versicolor\", \"virginica\": \"species-virginica\"}\n    st.markdown(\n        f\"&lt;div class='result-card'&gt;\"\n        f\"&lt;span class='{species_class[predicted_species]}' style='font-size: 1.5em;'&gt;\"\n        f\"{species_emoji[predicted_species]} Predicted species: &lt;b&gt;{predicted_species.capitalize()}&lt;/b&gt;\"\n        f\"&lt;/span&gt;&lt;/div&gt;\",\n        unsafe_allow_html=True,\n    )\n</code></pre>"},{"location":"reference/ui/#iris_ml_classification.ui.show_footer","title":"show_footer","text":"<pre><code>show_footer() -&gt; None\n</code></pre> <p>Display a footer message crediting the app creator and technologies used.</p> <p>This function renders a styled footer using markdown and HTML.</p> Source code in <code>src/iris_ml_classification/ui.py</code> <pre><code>def show_footer() -&gt; None:\n    \"\"\"Display a footer message crediting the app creator and technologies used.\n\n    This function renders a styled footer using markdown and HTML.\n    \"\"\"\n    st.markdown(\n        \"&lt;div class='footer'&gt;Made with \u2764\ufe0f using Streamlit &amp; Databricks Free Edition by Mehmet Acikgoz&lt;/div&gt;\",\n        unsafe_allow_html=True,\n    )\n</code></pre>"},{"location":"tutorials/getting-started/","title":"Getting Started","text":"<p>Databricks Unity Catalog</p> <p></p> <p>Databricks Unity Catalog</p> <p></p> <p>https://www.youtube.com/watch?v=CZ7x_OYmXys&amp;t=396s</p>"}]}